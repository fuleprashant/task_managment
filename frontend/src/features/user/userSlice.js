import { createSlice } from "@reduxjs/toolkit";

const token = localStorage.getItem("token");
const initialState = {
  user: null,
  isAuthenticated: !!token,
  loading: false,
  error: null,
  otpVerified: false,
};

export const userSlice = createSlice({
  name: "auth",
  initialState,
  reducers: {
    registrationStart: (state) => {
      state.loading = true;
      state.error = null;
    },

    // Handle registration success
    registrationSuccess: (state, action) => {
      // Log the payload to check the structure

      const user = action.payload.user;

      state.user = user;
      state.loading = false;
      state.error = null;
    },

    // Handle registration failure
    registrationFailure: (state, action) => {
      state.loading = false;
      state.error = action.payload; // error message
    },
    // start the login process (set loading state to true)
    loginStart: (state) => {
      state.loading = true;
      state.error = null;
    },

    // handle login success
    loginSuccess: (state, action) => {
      const user = action.payload;
      console.log("the user is the redux is", user);

      if (user) {
        // Safely create the user object with email and fullname
        const theUser = {
          email: user.email,
          fullname: user.name,
        };

        // Store user data in localStorage if available
        localStorage.setItem("user", JSON.stringify(theUser));
        localStorage.setItem("token", action.payload.token); // Store token
        localStorage.setItem("profile", user.profilePicture);
      } else {
        console.error("User data is missing in the payload.");
      }

      state.user = user;
      state.loading = false;
      state.error = null;

      // Store the token and user data in localStorage
    },

    // handle login failure
    loginFailure: (state, action) => {
      state.loading = false;
      state.error = action.payload; // error message
    },

    // Start the OTP verification process (set loading state to true)
    otpStart: (state) => {
      state.loading = true;
      state.error = null;
    },

    // Handle OTP verification success
    otpVerifySuccess: (state) => {
      const updatedUser = {
        ...state.user,
        accountVerified: true,
      };
      state.user = updatedUser;
      state.otpVerified = true;
      state.loading = false;
    },

    // Handle OTP verification failure
    otpVerifyFailure: (state, action) => {
      state.loading = false;
      state.error = action.payload; // Error message
    },

    // Logout the user (reset state)
    logout: (state) => {
      state.user = null;
      state.isAuthenticated = false;
      state.loading = false;
      state.error = null;
      state.otpVerified = false;

      // Clear token and user data from localStorage
      localStorage.removeItem("token");
      localStorage.removeItem("user");
    },
  },
});

// Export actions generated by createSlice
export const {
  loginStart,
  loginSuccess,
  loginFailure,
  otpStart,
  otpVerifySuccess,
  otpVerifyFailure,
  logout,
  registrationFailure,
  registrationSuccess,
  registrationStart,
} = userSlice.actions;

// Export the reducer to include in the store
export default userSlice.reducer;
