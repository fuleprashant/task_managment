import { createSlice } from "@reduxjs/toolkit";

const initialState = {
  user: null,
  isAuthenticated: false,
  loading: false,
  error: null,
  otpVerified: false,
};

export const userSlice = createSlice({
  name: "auth",
  initialState,
  reducers: {
    // start the login process (set loading state to true)
    loginStart: (state) => {
      state.loading = true;
      state.error = null;
    },

    // handle login success
    loginSuccess: (state, action) => {
      state.user = action.payload.user;
      state.isAuthenticated = true;
      state.loading = false;

      // Store the token and user data in localStorage
      localStorage.setItem("token", action.payload.token); // Store token
      localStorage.setItem("user", JSON.stringify(action.payload.user)); // Store user data
    },

    // handle login failure
    loginFailure: (state, action) => {
      state.loading = false;
      state.error = action.payload; // error message
    },

    // Start the OTP verification process (set loading state to true)
    otpStart: (state) => {
      state.loading = true;
      state.error = null;
    },

    // Handle OTP verification success
    otpVerifySuccess: (state) => {
      state.otpVerified = true;
      state.loading = false;
    },

    // Handle OTP verification failure
    otpVerifyFailure: (state, action) => {
      state.loading = false;
      state.error = action.payload; // Error message
    },

    // Logout the user (reset state)
    logout: (state) => {
      state.user = null;
      state.isAuthenticated = false;
      state.loading = false;
      state.error = null;
      state.otpVerified = false;

      // Clear token and user data from localStorage
      localStorage.removeItem("token");
      localStorage.removeItem("user");
    },
  },
});

// Export actions generated by createSlice
export const {
  loginStart,
  loginSuccess,
  loginFailure,
  otpStart,
  otpVerifySuccess,
  otpVerifyFailure,
  logout,
} = userSlice.actions;

// Export the reducer to include in the store
export default userSlice.reducer;
